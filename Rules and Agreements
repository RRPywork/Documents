Rules:
    I.      Каждый commit должен содержать идентификатор автора (id - имя) в заголовке. Это делается с целью упрощения работы 
    по выявлению авторства.
            a) Также, каждый отдельный участок кода должен содержать комменттарий с указанием авторства и, желательно,
            временем последнего изменения
    
    II.     Работа идет в соответствии со стандартами, указанными в документах в этом репозитории. Также учитываются локальные правила,
    но они имеют более низкий приоритет. В случае конфликтных ситуаций, ответ может лежать в других документах. В ином случае,
    создается ОТДЕЛЬНЫЙ файл, содержащий решение по этому поводу (временное - помечается temp в названии - или постоянное)
            a) Приоритеты: 
                i.      Документы в этом репозитории.
                ii.     Документация уровня подсистемы.
                iii.    Документация уровня отдельных модулей.
                iv.     Документация уровня отдельного элемента.
                v.      Руководства пользователя и разработчика в Notes.
            b) Дополнение относительно конфликтных ситуаций. Если вы обнаружили конфликтную ситуацию - оповестите об этом руководителя.
    
    III.    Для разработки используется практика разработки через тестирование. Вначале тесты - потом код. Для любого кода
    должны присутствовать тесты.
                a) Коды тестов помещаются в папке tests по следующим правилам:
                    i.      В папку test\integration помещаются тесты, цель которых - проверить работы системы в целом.
                    
                    ii.     В папку test\regression помещаются регрессионные тесты - тесты, задачей которых является проверка 
                            неуменьшения функционала системы по отношению к предыдущим версиям, проверка невозобновления ранее уже 
                            исправленных ошибок, проверка факта исправления текущих ошибок.
                            
                    iii.    В папку test\subsystem\*subs_name* помещаются тесты субсистем таких как GUI, DATABASE, MAIN ...
                    
                    iv.     В папку test\subsystem\*subs_name*\unit Помещаются тесты отдельных модулей субсистем.
                    
                b) Каждый файл тестов должен иметь в своем __doc__ описание тестируемого объекта и номер итерации.
        
    IV.     Во время разработки используется подход минимального влияние конкретики на общее. Код GUI не должен сильно 
    зависеть от изменений в базе данных или ее обработке. Он может начать поддерживать новые виды передаваемых данных, но не должен
    изменятся только из-за небольшого изменения в обработчике, не касающегося формата передачи.
    
    V.      Репозиторий проекта делится на две основные ветви: master, хранящую последнюю рабочую версию, и dev,
    хранящую версию текущей итерации.
            a) Переход между ветвями осуществляется в конце итерации исключительно после полного тестирования текущей версии.
        
            b) Для утверждения перехода тестирование проводится вначале на рабочих машинах с использованием основной IDE,
            после - с использованием Spyder. Выполняется полное оценивание кода. В случае полученя оценки, не равной десяти,
            в при планировании следующей итерации возможно добавление задачи по улучшению ситуации. Решение принимается в 
            формате консилиума на очновании текущих приоритетов.
        
    VI.     Размер итерации устанавливается исходя из сроков. Последняя итерация перед контрольной точкой отводится на переработку кода
    и тестирование (возможны исключения). Планирование следующей итерации осуществляется руководителем на основании имеющихся требований
    и результатов предыдущих итераций. Руководитель обязан согласовать план итерации с остальными членами команды на предмет его
    выполнимости. Согласование проводится в формате конференции.
    
    VII.    В соответствии с принципами agile, недопустимы переработки, если это, конечно, не последняя неделя до срока. Таким образом, 
    работаем ДНЕМ-с.
    
    VIII. Так как от качества кода зависит оценка, код с оценкой в spyder ниже, скажем, 5 (может менятся), недопустим.
    
    IX. Руководитель имеет право продать несоблюдающих данные правила и соглашения в Б***вию на галеры.
    
    X. Разработка идет от общего к частному, т.е. вначале поток данных (определяемя в каком виде должны быть вх.\вых. данные),
    потом всё остальное.
    
    
    
    
Agreements:
    I.      Разделение авторства идет поровну несмотря на требования авторства в коммитах. Соответственно, излишняя лень карается
    (нормальная лень - делать сразу и хорошо).
    
    II.     Мы определились использовать PyCharm.
    
    III.    GitKraken
    
    IV.     Для планирования - либо доски GitHub, либо Trello.
    
    V.      Для UML - есть вообще какое-то нормальное бесплатное ПО для UML 2.0? Я нашел только Umbrello, но он мне шо-то не нравится, и
    он, кажется, для 1.0.
